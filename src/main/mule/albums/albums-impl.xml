<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:sps-logger="http://www.mulesoft.org/schema/mule/sps-logger" xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/sps-logger http://www.mulesoft.org/schema/mule/sps-logger/current/mule-sps-logger.xsd">
	<sub-flow name="impl-get-albums" doc:id="40a8b9e9-66a0-4379-ab67-f366ab5674f1" >
		<sps-logger:sps-logger doc:name="INFO START" doc:id="284120c8-f9e9-4bbe-9cb0-790406d25519" config-ref="SPS_Logger_Config" eventName="START" message="#['impl-get-albums::START::payload:'  ++ write(payload, &quot;application/json&quot;)]" category="${logcat}" />
		<set-variable value="#[message.attributes.queryParams.albumTitle as String]" doc:name="albumTitle" doc:id="88b6139d-4a0f-426a-9fb0-921960a256fb" variableName="albumTitle"/>
		<sps-logger:sps-logger doc:name="Album Title" doc:id="b1fde34a-de6c-48df-8d17-f7c0a98d7a03" config-ref="SPS_Logger_Config" targetSystem="${db.databaseMusic}" eventName="BEFORE REQUEST" level="DEBUG" message="#['impl-get-albums::START::payload:'  ++ write(payload, &quot;application/json&quot;)]" category="${logcat}"/>
		<db:select doc:name="Select" doc:id="a01233f6-018d-4477-8e5f-06cc5acec0ca" config-ref="mysql-connection">
			<db:sql ><![CDATA[SELECT DISTINCT ALB.ALBUM_ID, ALB.TITLE, ALB.GENRE, ALB.PUBLICATION_DT, 
  ART.GROUP_NM, ART.ARTIST_ID
    FROM BC_ALBUM ALB 
        LEFT OUTER JOIN BC_ARTIST ART 
          ON ART.ARTIST_ID = ALB.ARTIST_ID
    WHERE ALB.TITLE LIKE :albumTitle]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
  albumTitle: vars.albumTitle ++ '%' 
}]]]></db:input-parameters>
		</db:select>
		<sps-logger:sps-logger doc:name="SELECT ALBUM" doc:id="f64c9eaa-3989-478e-b6dd-194041042f97" config-ref="SPS_Logger_Config" targetSystem="${db.databaseMusic}" eventName="AFTER REQUEST" level="DEBUG" message="#['impl-get-albums::SELECT::payload:' ++ write(payload, &quot;application/json&quot;)]" category="${logcat}"/>
		<ee:transform doc:name="Transform Message" doc:id="a94a9d8e-53f4-4077-8d25-cd2b7626188f" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	statusCode: p("http.get.status.ok"),
	message: p("http.get.message.ok"),
	searchCriteria: vars.albumTitle,
	albums: payload map (albums) -> {
		albumId: albums.ALBUM_ID,
		albumTitle: albums.TITLE default "",
		genre: albums.GENRE default "",
		publicationDate: albums.PUBLICATION_DT as String{format: "yyyy-MM-dd"},
		artistId: (albums.ARTIST_ID default 0),
		groupName: albums.GROUP_NM default ""
	}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<sps-logger:sps-logger doc:name="INFO END" doc:id="cb5ac7d8-c568-4b25-9178-594b569b26b9" config-ref="SPS_Logger_Config" eventName="END" message="#['impl-get-albums::START::payload:'  ++ write(payload, &quot;application/json&quot;)]" category="${logcat}"/>
	</sub-flow>
	<flow name="impl-add-albums" doc:id="0fd09abd-cfff-4c13-b7ea-49348aba32df" >
		<http:listener doc:name="Listener" doc:id="1b1cf7ce-b9c6-4ae2-bbed-5db70d0f9503" config-ref="http-listener-config" path="/batchAddAlbums"/>
		<sps-logger:sps-logger doc:name="INFO START" doc:id="c71286d3-3f4c-4cc1-a4f1-834f7c3feb84" config-ref="SPS_Logger_Config" eventName="START" message="#['impl-add-albums::START::payload' ++ write(payload, &quot;application/json&quot;)]" category="${logcat}"/>
		<ee:transform doc:name="Transform Message" doc:id="7432dd09-1f45-4dac-8b20-c00601fd5768" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload.albums]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<sps-logger:sps-logger doc:name="After transformation" doc:id="70c06610-fada-4b21-afe2-9484a042a77a" config-ref="SPS_Logger_Config" eventName="AFTER TRANSFORM" level="DEBUG" message="#['impl-add-albums::Transform: '  ++  write(payload, &quot;application/json&quot;)]" category="${logcat}"/>
		<set-variable value="#[sizeOf(payload)]" doc:name="numberOfAlbums" doc:id="74c0bef5-964f-4773-be1b-9e2661cfb5f9" variableName="numberOfAlbums"/>
		<sps-logger:sps-logger doc:name="Number of albums" doc:id="f036340f-4958-49e8-923c-ca158ffe00dc" config-ref="SPS_Logger_Config" level="WARN" message="#['impl-add-albums::numberOfAlbums: '  ++ write(payload, &quot;application/json&quot;)]" category="${logcat}"/>
		<batch:job jobName="impl-add-albums-batch-job" doc:id="20533b0d-21d7-40e8-9dc1-0a4f0e99d46c" maxFailedRecords="10">
			<batch:process-records >
				<batch:step name="process-all-records" doc:id="6315a7bf-b90a-4dd5-9c6b-da048ef6a1a0" >
					<sps-logger:sps-logger doc:name="Batch Start" doc:id="78334734-00f8-4ccb-9106-da4aef499acb" config-ref="SPS_Logger_Config" eventName="START" message="#['impl-add-albums::Batch::Start: '  ++ write(payload, &quot;application/json&quot;)]" category="${logcat}"/>
					<set-payload value='#[%dw 2.0&#10;output application/java&#10;---&#10;{&#10;		albumIdParam: 		0,&#10;		titleParam: 		payload.albumTitle,&#10;		genreParam: 		payload.genre,&#10;		publicationParam: 	payload.publicationDate,&#10;		statusParam: 	"CV",&#10;		artistIdParam: 	payload.artistId&#10;}]' doc:name="insert payload" doc:id="93ebbe68-55b4-4acb-b399-404128f463ca" />
					<sps-logger:sps-logger doc:name="Insert payload" doc:id="8157f6a3-6661-4787-b411-f3c1716d7453" config-ref="SPS_Logger_Config" eventName="AFTER TRANSFORM" level="DEBUG" message="#['impl-add-albums::Batch::payload: '  ++ write(payload, &quot;application/json&quot;)]" category="${logcat}"/>
					<batch:aggregator doc:name="Batch Aggregator" doc:id="aa87dc52-dddc-48c5-8fbd-94e580718e78" size="3">
						<sps-logger:sps-logger doc:name="Bulk start" doc:id="0c360c4b-5530-4d6f-8350-18da8094d56d" targetSystem="${db.databaseMusic}" config-ref="SPS_Logger_Config" level="DEBUG" message="#['impl-add-albums::BulkStart::payload: '  ++  write(payload, &quot;application/json&quot;)]" category="${logcat}"/>
						<db:bulk-insert doc:name="Bulk insert Album" doc:id="bd9c5d42-6642-4651-bf8d-bdc42a572a76" config-ref="mysql-connection">
							<db:sql ><![CDATA[insert into BC_MUSIC_FACTORY.BC_ALBUM 
   (album_id,title, genre, publication_dt, status_cd, artist_id) values
       (:albumIdParam,
        :titleParam,
        :genreParam,
        :publicationParam,
        :statusParam,
        :artistIdParam)]]></db:sql>
						</db:bulk-insert>
						<sps-logger:sps-logger doc:name="Bulk End" doc:id="a1ffd3f2-9a48-4de2-b2f4-3ba3b5a11691" config-ref="SPS_Logger_Config" targetSystem="${db.databaseMusic}" eventName="BEFORE REQUEST" message="#['impl-add-albums::BulkEnd::payload: '  ++  write(payload, &quot;application/json&quot;)]" category="${logcat}"/>
					</batch:aggregator>
				</batch:step>
				<batch:step name="failures-only-step" doc:id="a7bf4f33-cfb5-457a-9986-7d49030e27a6" acceptPolicy="ONLY_FAILURES">
					<sps-logger:sps-logger doc:name="Failure" doc:id="f254f515-85be-4a1f-944e-73026228dcd9" config-ref="SPS_Logger_Config" targetSystem="${db.databaseMusic}" eventName="BEFORE REQUEST" level="WARN" message="#['impl-add-albums::Batch::FailuresOnlyStep:'  ++  write(payload, &quot;application/json&quot;)]" category="${logcat}"/>
					<db:insert doc:name="Record album title as error" doc:id="d44a4cbd-4b03-4e85-88c5-a17872fd52b3" config-ref="mysql-connection">
						<db:sql ><![CDATA[INSERT INTO BC_MUSIC_FACTORY.BC_STAGING_ERROR (STAGING_ID, STAGING_RECORD, STATUS_CD) 
    VALUES (NULL, :stagingRecord, 'CV')]]></db:sql>
						<db:input-parameters ><![CDATA[#[{
    stagingRecord: payload.titleParam as String,
    statusParam: payload.statusParam as String
}]]]></db:input-parameters>
					</db:insert>
					<sps-logger:sps-logger doc:name="Insert Failure" doc:id="0d509952-5940-49b7-aba2-f05e0f4b7b46" config-ref="SPS_Logger_Config" targetSystem="${db.databaseMusic}" eventName="AFTER REQUEST" level="WARN" message="#['impl-add-albums::Batch::InsertFailure: '  ++ write(payload, &quot;application/json&quot;)]" category="${logcat}"/>
				</batch:step>
			</batch:process-records>
			<batch:on-complete >
				<ee:transform doc:name="Transform Message" doc:id="3ac03d3f-c523-44ef-98f3-29d182affedb">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
var batchSummary = payload
---
{
	"totalRecords": batchSummary.totalRecords default 0,
	"failedRecords": batchSummary.failedRecords default 0,
	"successfulRecords": batchSummary.successfulRecords default 0
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" doc:name="Insert Failure" doc:id="17638e20-798a-422a-9496-53a4c67dccf3" message="#['impl-add-albums::BATCH::InsertFailure:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
			</batch:on-complete>
		</batch:job>
	</flow>
	</mule>
